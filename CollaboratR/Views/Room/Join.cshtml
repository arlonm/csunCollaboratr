@model CollaboratR.ViewModels.RoomViewModel
@{
    ViewBag.Title = "Session";
    Layout = "~/Views/Shared/_Layout_Chat.cshtml";
}

<style>
    .chatblock {
        font-size: 12px;
    }

        .chatblock .cbs1 {
            color: #A94545;
        }

        .chatblock .cbs2 {
            font-size: 12px;
        }

    .chatInput {
        padding: 5px;
        max-width: 1000px !important;
        border: 1px solid #ccc;
        resize: none;
        border-radius: 3px;
    }
</style>

<style type="text/css">
    #whiteboard {
        border: 1px dashed #cccccc;
        margin: 5px;
        border-style: dotted;
        border-width: 1px;
        background-color: #ffffff;
        vertical-align: top;
    }

    #containerw {
        position: relative;
        overflow: auto;
        scrollbar-base-color: #ffeaff;
    }

    #imageTemp {
        position: absolute;
        top: 1px;
        left: 1px;
        /*margin: 5px; makes a bigger show*/
    }

    #imageTempt {
        position: absolute;
        top: 1px;
        left: 1px;
        margin: 5px;
    }

    .ui-widget-overlay {
        opacity: .70;
        filter: alpha(opacity=70);
    }
</style>
<div class="row">
    <div class="col-md-2" id="side-bar" style="padding-right:0px;">
        <div class="row" id="user-space">
            <div class="col-md-12" style="text-align: center;  margin-top: 5px;  margin-bottom: 5px;  color: #000;  font-weight: bold;">
                People in this room
            </div>
            <div class="col-md-12" id="user-list"></div>
        </div>
        <div class="row" id="tool-space">
            <div class="col-md-12" id="tool-list"></div>
        </div>
    </div>
    <div class="col-md-10" style="padding-left:0px;">
        <div id="collaboration-space" class="container">
            <div class="row" style="margin-top:4px;">
                <div id="chatGrandParent" class="col-md-6" style="height:800px;padding-left:0px;padding-right:0px;">
                    <div id="chatDisplayParent" style="height:75%;width:100%;border: 5px solid #EEE;">
                        <div id="chatDisplay" style="padding:10px;"></div>
                    </div>
                    <div id="chatInputParent" style="height:20%;width:100%;border: 5px solid #EEE;padding:3%;">
                        <textarea id="chatInput" class="chatInput" placeholder="Your message goes here.."></textarea>
                        <div style="text-align:right;">
                            <button id="chatSendBtn" type="button" class="btn btn-default" aria-expanded="false">Send</button>
                        </div>
                    </div>
                </div>
                <div id="whiteBoardGrandParent" class="col-md-6">
                    <table width="100%" id="tableWhiteBoard">
                        <tr>
                            <td style="width: 80%">
                                <table style="vertical-align: top; width: 100%;" cellpadding="0" cellspacing="0">
                                    <tr>
                                        <td>
                                            <img id="imgline" style="border-color: Gray; border-style: dashed; width: 32px; height: 32px"
                                                 src="/assets/images/line_dim.png" onclick="SelectTool('line'); return false;" />
                                            <img id="imgpencil" style="border-color: Gray; border-style: dashed; width: 32px;
                                             height: 32px" src="/assets/images/pencil_dim.png" onclick="SelectTool('pencil'); return false;" />
                                            <img id="imgrect" style="border-color: Gray; border-style: dashed; width: 32px; height: 32px"
                                                 src="/assets/images/rect_dim.png" onclick="SelectTool('rect'); return false;" />
                                            <img id="imgerase" style="border-color: Gray; border-style: dashed; width: 32px;
                                             height: 32px" src="/assets/images/erase_dim.png" onclick="SelectTool('erase'); return false;" />
                                        </td>
                                    </tr>
                                    <tr>
                                        <td style="vertical-align: top;">
                                            <div id="containerw" style="width: 420px; height: 800px">
                                                <canvas id="whiteBoard"></canvas>
                                                <div id="status">
                                                </div>
                                            </div>
                                        </td>
                                    </tr>
                                </table>
                            </td>
                            @*  *@
                        </tr>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>
@*Modal*@
<div class="modal fade" id="connection-modal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title" id="myModalLabel">Loading</h4>
            </div>
            <div class="modal-body">
                <div id="loading-icon">
                    <p>Room is loading, please wait.</p>
                    <img src="~/Assets/images/barloader.gif" />
                </div>
            </div>
            <br />
        </div>
    </div>
</div>

<input type="hidden" id="userGuid" value="@Model.JoiningUser.UserGuid" />
<input type="hidden" id="userName" value="@Model.JoiningUser.Username" />
<input type="hidden" id="currentRoomId" value="@Model.Room.RoomGuid" />
<input type="hidden" id="sessinId" value="" />
<input type="hidden" id="groupName" value="" />

@section scripts{
    <script type="text/javascript" src="~/Scripts/jquery-ui.js"></script>
    <script src="/Scripts/jquery-ui-1.8.11.min.js" type="text/javascript"></script>
    <script src="~/Scripts/jquery.signalR-2.1.2.js"></script>
    <script src="~/signalr/hubs"></script>
    <script src="~/Scripts/whiteboard_1.js" type="text/javascript"></script>

    <script type="text/javascript">
        
        var collaborationHub = "";

        $(function () {
            $('#connection-modal').modal('show');

            //manual fitting
            $("#chatGrandParent").height(screen.height - 120);
            $("#chatInput").width($("#chatInputParent").width() - 10).keypress(function (event) {
                if (event.keyCode == 13) {
                    $("#chatSendBtn").click();
                }
            });

            //Query string searcher function, Accessed by queryString["Key"]
            var queryString = (function (a) {
                if (a == "") return {};
                var b = {};
                for (var i = 0; i < a.length; ++i) {
                    var p = a[i].split('=', 2);
                    if (p.length == 1)
                        b[p[0]] = "";
                    else
                        b[p[0]] = decodeURIComponent(p[1].replace(/\+/g, " "));
                }
                return b;
            })(window.location.search.substr(1).split('&'));

            //These values represent what is being updated by this user
            var updateRoom = false;
            var curModule = null;

            var roomIdentifierFromUrl = queryString["roomGuid"];
            var roomIdentifier = ((roomIdentifierFromUrl != null && roomIdentifierFromUrl != "") ? queryString["roomGuid"] : $('#currentRoomId').val().trim());
            $('#groupName').val(roomIdentifier);

            var userIdentifier = $('#userGuid').val();
            var userName = $('#userName').val();

            //make a var out of it to make referencing easier
            collaborationHub = $.connection.collaborationHub;

            //Takes in an object of type room model
            collaborationHub.client.displayRoom = function (model) {
                //Hide the modal popup
                $('#connection-modal').modal('hide');
            };

            collaborationHub.client.broadcastUserlist = function (arrUsers) {
                var userList = $('#user-list');
                userList.empty();

                //the new user guid combined with anonymous users messes up the join room user logic, this just makes sure you dont see yourself more than once
                var s = "";
                for (var i = 0; i < arrUsers.length; i++) {
                    if (s.indexOf(arrUsers[i].Username) == -1) {
                        s += arrUsers[i].Username;
                        userList.append($('<a class="list-group-item" id="lftul_' + arrUsers[i].Username + '">' + arrUsers[i].Username + '</a>'));
                    }
                }
                //to indicate yourself
                userList.find("#lftul_" + userName).css("font-style", "italic");
            }
            //Update a user's users list to show any new people who have joined
            collaborationHub.client.addUserToList = function (user) {
                var userList = $('#user-list');
                userList.append($('<a class=list-group-item>' + user.Username + '</a>'));
            };

            collaborationHub.client.removeUserFromList = function (user) {
                var userList = $('#user-list');
                userList.children().each(function () {
                    if ($(this).text() == user.Username) {
                        $(this).remove();
                    }
                });
            };

            //handle recieving messages from other users
            collaborationHub.client.recieveMessage = function (username, message) {
                //if cant exclude server side, will check username and exclude if the same
                var textDiv = $('<div class="chatblock">');
                var span1 = $('<span class="cbs1">').text(username + " : ");
                var span2 = $('<span class="cbs2">').text(message);
                $("#chatDisplay").append(textDiv.append(span1).append(span2));
            }

            collaborationHub.client.handleDraw = function (message, sessnId, name) {
                var sessId = $('#sessinId').val();
                if (sessId != sessnId) {
                    $("#divStatus").html("");

                    $("#divStatus").html("<i>" + name + " drawing...</i>")
                    var drawObjectCollection = jQuery.parseJSON(message)
                    for (var i = 0; i < drawObjectCollection.length; i++) {
                        DrawIt(drawObjectCollection[i], false);
                        if (drawObjectCollection[i].currentState) {
                            if (drawObjectCollection[i].currentState == DrawState.Completed) {
                                $("#divStatus").html("<i>" + name + " drawing completing...</i>")
                                $("#divStatus").html("");
                            }
                        }
                    }
                }
            };

            //Hub server function implementations
            $.connection.hub.start({ waitForPageLoad: true })
                .done(function () {

                    console.log('Now connected, connection ID=' + $.connection.hub.id);
                    //After the connection is complete, then define the server side functions
                    $('#sessinId').val($.connection.hub.id);

                    //Have the user join the room through the Hub
                    collaborationHub.server.joinRoom(roomIdentifier, { UserGuid: userIdentifier, Username: userName });

                    //Load the room module information for the user
                    collaborationHub.server.loadRoomInformation(roomIdentifier);

                    //Load all of the users in the room
                    collaborationHub.server.loadRoomUserList(roomIdentifier);

                    $("#chatSendBtn").click(function () {
                        var allthetext = $("#chatInput").val();
                        if (allthetext.length > 0) {
                            var textDiv = $('<div class="chatblock">');//.text(userName + " : " + allthetext);
                            var span1 = $('<span class="cbs1">').text(userName + " : ");
                            var span2 = $('<span class="cbs2">').text(allthetext);
                            $("#chatDisplay").append(textDiv.append(span1).append(span2));
                            $("#chatInput").val("");
                            collaborationHub.server.sendChat(userName, allthetext, $.connection.hub.id, roomIdentifier);
                        }
                    });

                    //$(document).ready(function () {
                        try {

                            canvaso = document.getElementById('whiteBoard');
                            if (!canvaso) {
                                alert('Error: Cannot find the imageView canvas element!');
                                return;
                            }

                            if (!canvaso.getContext) {
                                alert('Error: no canvas.getContext!');
                                return;
                            }
                            canvaso.width = 700;
                            canvaso.height = 400;

                            // Get the 2D canvas context.
                            contexto = canvaso.getContext('2d');
                            if (!contexto) {
                                alert('Error: failed to getContext!');
                                return;
                            }

                            // Add the temporary canvas.
                            var container = canvaso.parentNode;


                            canvas = document.createElement('canvas');
                            if (!canvas) {
                                alert('Error: Cannot create a new canvas element!');
                                return;
                            }

                            canvas.id = 'imageTemp';
                            canvas.width = canvaso.width;
                            canvas.height = canvaso.height;
                            container.appendChild(canvas);

                            context = canvas.getContext('2d');

                            // Activate the default tool.
                            SelectTool(tool_default);

                            // Attach the mousedown, mousemove and mouseup event listeners.
                            canvas.addEventListener('mousedown', ev_canvas, false);
                            canvas.addEventListener('mousemove', ev_canvas, false);
                            canvas.addEventListener('mouseup', ev_canvas, false);
                            canvas.addEventListener('mouseout', ev_canvas, false);
                            context.clearRect(0, 0, canvas.width, canvas.height);
                            toggleBG1();
                        }
                        catch (err) {
                            alert(err.message);
                        }
                    //});

                }).fail(function () {
                    $('#connection-modal').modal('hide');
                    console.log('Could not connect');
                    alert("Hub connection failed");
                });

            //dont think this works
            $.connection.hub.disconnected(function () {
                collaborationHub.server.LeaveRoom(roomIdentifier);
            });

        });
    </script>

    

}
